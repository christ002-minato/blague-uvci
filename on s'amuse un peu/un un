    

    
    
<?php
require_once "db_connect.php";

class Product {
    private $conn;

    public function __construct() {
        $db = new Database();
        $this->conn = $db->db_connect();
    }

    // create a new product
    public function createProduct($name, $price, $category_id, $description = '', $image = '') {
        $sql = "INSERT INTO products (name, price, category_id, description, image) 
                VALUES (:name, :price, :category_id, :description, :image)";
        $stmt = $this->conn->prepare($sql);
        
        return $stmt->execute([
            ':name' => $name,
            ':price' => $price,
            ':category_id' => $category_id,
            ':description' => $description,
            ':image' => $image
        ]);
    }

    // prendre tous all products
    public function getAllProducts() {
        $sql = "SELECT p.*, c.name as category_name 
                FROM products p 
                LEFT JOIN categories c ON p.category_id = c.id";
        $stmt = $this->conn->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    // prndre product by ID
    public function getProductById($id) {
        $sql = "SELECT p.*, c.name as category_name 
                FROM products p 
                LEFT JOIN categories c ON p.category_id = c.id 
                WHERE p.id = :id";
        $stmt = $this->conn->prepare($sql);
        $stmt->execute([':id' => $id]);
        return $stmt->fetch(PDO::FETCH_ASSOC);
    }

    // ajouter product
    public function updateProduct($id, $name, $price, $category_id, $description = '', $image = '') {
        $sql = "UPDATE products SET 
                name = :name, 
                price = :price, 
                category_id = :category_id, 
                description = :description, 
                image = :image 
                WHERE id = :id";
        $stmt = $this->conn->prepare($sql);
        
        return $stmt->execute([
            ':id' => $id,
            ':name' => $name,
            ':price' => $price,
            ':category_id' => $category_id,
            ':description' => $description,
            ':image' => $image
        ]);
    }

    // effacer product
    public function deleteProduct($id) {
        $sql = "DELETE FROM products WHERE id = :id";
        $stmt = $this->conn->prepare($sql);
        return $stmt->execute([':id' => $id]);
    }

    public function getProductsPaginated($limit, $offset) {
        $sql = "SELECT p.*, c.name as category_name FROM products p LEFT JOIN categories c ON p.category_id = c.id LIMIT :limit OFFSET :offset";
        $stmt = $this->conn->prepare($sql);
        $stmt->bindValue(':limit', (int)$limit, PDO::PARAM_INT);
        $stmt->bindValue(':offset', (int)$offset, PDO::PARAM_INT);
        $stmt->execute();
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    
    public function countAllProducts() {
        $sql = "SELECT COUNT(*) FROM products";
        $stmt = $this->conn->prepare($sql);
        $stmt->execute();
        return (int)$stmt->fetchColumn();
    }
}
?>
